
import pickle
import numpy as np
import pandas as pd
import plotly.express as px


"""
Matching of overlapping dataset having same attributes

Input: 'alldataset_das_dict_NEW.pkl' file generated by 'download_erddap_metadata.py'
Output: 'df_attributal_matching_score.csv'  and visualization 'd2d_similarity.html'
"""

if __name__ == '__main__':
    # run download_erddap_metadata.py
    erdap_dict_ = pickle.load(open("../res/alldataset_das_dict_NEW.pkl", 'rb'))

    list_of_das_variables_ = []
    item_labels = []
    for dset_ in erdap_dict_:
        item_labels.append(dset_['NC_GLOBAL']['title'][1])
        del [dset_['NC_GLOBAL']]
        list_of_das_variables_.append(set(dset_.keys()))

    num_items =  len(list_of_das_variables_)
    # Initialize a 50x50 matrix with zeros
    matching_matrix = np.zeros((num_items, num_items), dtype=int)

    lod = list_of_das_variables_
    # Calculate matching scores
    for i in range(num_items):
        for j in range(num_items):
            total_ = len(lod[i])
            match_count = len(lod[i].intersection(lod[j]))
            match_count = int(float(match_count/total_)*100)


            matching_matrix[i][j] = match_count


    df_matching = pd.DataFrame(matching_matrix, index=item_labels, columns=item_labels)
    df_matching.to_csv("./res/df_attributal_matching_score.csv")
    # Create a Seaborn heatmap
    # Set up the plot
    fig = px.imshow(
        df_matching,
        labels=dict(x="Items", y="Items", color="Matching Score"),
        x=item_labels,
        y=item_labels,
        color_continuous_scale='Oranges',
        title='Interactive Matching Score Heatmap'
    )
    fig.update_traces(
        hovertemplate='Item X: %{x}<br>Item Y: %{y}<br>Matching Score: %{z}<extra></extra>'
    )
    # Update layout for better readability
    # Adjust layout for better readability
    fig.update_layout(
        width=1800,  # Increase width
        height=1800,  # Increase height
        xaxis=dict(tickangle=90, tickfont=dict(size=4)),
        yaxis=dict(tickfont=dict(size=4)),
        title=dict(font=dict(size=20)),
        font=dict(size=10)
    )

    # Show the plot
    fig.write_html("./res/d2d_similarity.html")

    # fig.show()